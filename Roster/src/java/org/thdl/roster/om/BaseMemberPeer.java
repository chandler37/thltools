package org.thdl.roster.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;

// Local classes
import org.thdl.roster.om.map.*;


   
   
   
   
   
   
/**
  * This class was autogenerated by Torque on:
  *
  * [Wed May 14 19:01:42 EDT 2003]
  *
  */
public abstract class BaseMemberPeer
    extends BasePeer
{

    /** the default database name for this class */
    public static final String DATABASE_NAME = "Roster";

     /** the table name for this class */
    public static final String TABLE_NAME = "Member";

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static MapBuilder getMapBuilder()
        throws TorqueException
    {
        return getMapBuilder(MemberMapBuilder.CLASS_NAME);
    }

    /** the column name for the ID field */
    public static final String ID;
    /** the column name for the CREATED_BY field */
    public static final String CREATED_BY;
    /** the column name for the MODIFIED_BY field */
    public static final String MODIFIED_BY;
    /** the column name for the CREATED_ON field */
    public static final String CREATED_ON;
    /** the column name for the MODIFIED_ON field */
    public static final String MODIFIED_ON;
    /** the column name for the DELETED field */
    public static final String DELETED;
    /** the column name for the CONTACT_INFO_ID field */
    public static final String CONTACT_INFO_ID;
    /** the column name for the RESEARCH_INTEREST_ID field */
    public static final String RESEARCH_INTEREST_ID;
    /** the column name for the PUBLICATION_ID field */
    public static final String PUBLICATION_ID;
    /** the column name for the MEMBER_TYPE field */
    public static final String MEMBER_TYPE;
    /** the column name for the PERSON_DATA_ID field */
    public static final String PERSON_DATA_ID;
    /** the column name for the PROJECT_DATA_ID field */
    public static final String PROJECT_DATA_ID;
    /** the column name for the ORGANIZATION_DATA_ID field */
    public static final String ORGANIZATION_DATA_ID;

    static
    {
    ID = "Member.ID";
    CREATED_BY = "Member.CREATED_BY";
    MODIFIED_BY = "Member.MODIFIED_BY";
    CREATED_ON = "Member.CREATED_ON";
    MODIFIED_ON = "Member.MODIFIED_ON";
    DELETED = "Member.DELETED";
    CONTACT_INFO_ID = "Member.CONTACT_INFO_ID";
    RESEARCH_INTEREST_ID = "Member.RESEARCH_INTEREST_ID";
    PUBLICATION_ID = "Member.PUBLICATION_ID";
    MEMBER_TYPE = "Member.MEMBER_TYPE";
    PERSON_DATA_ID = "Member.PERSON_DATA_ID";
    PROJECT_DATA_ID = "Member.PROJECT_DATA_ID";
    ORGANIZATION_DATA_ID = "Member.ORGANIZATION_DATA_ID";

        if (Torque.isInit())
        {
            try
            {
                getMapBuilder();
            }
            catch (Exception e)
            {
                category.error("Could not initialize Peer", e);
            }
        }
        else
        {
            Torque.registerMapBuilder(MemberMapBuilder.CLASS_NAME);
        }
    }

 
    /** number of columns for this peer */
    public static final int numColumns =  13;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT =
        "org.thdl.roster.om.Member";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className)
    {
        Class c = null;
        try
        {
            c = Class.forName(className);
        }
        catch (Throwable t)
        {
            category.error("A FATAL ERROR has occurred which should not "
                + "have happened under any circumstance.  Please notify "
                + "the Turbine developers <turbine-dev@jakarta.apache.org> "
                + "and give as many details as possible (including the error "
                + "stack trace).", t);

            // Error objects should always be propogated.
            if (t instanceof Error)
            {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }


    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results)
            throws TorqueException
    {
        try
        {
            QueryDataSet qds = null;
            List rows = null;
            try
            {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            }
            finally
            {
                if (qds != null)
                {
                    qds.close();
                }
            }

            return populateObjects(rows);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }



    
                                    
            /** A key representing a particular subclass */
    public static final String CLASSKEY_PERSON =
        "person";

    /** A class that can be returned by this peer. */
    public static final String CLASSNAME_PERSON =
        "org.thdl.roster.om.Person";

    /** A class that can be returned by this peer. */
    public static final Class CLASS_PERSON =
        initClass(CLASSNAME_PERSON);
            /** A key representing a particular subclass */
    public static final String CLASSKEY_PROJECT =
        "project";

    /** A class that can be returned by this peer. */
    public static final String CLASSNAME_PROJECT =
        "org.thdl.roster.om.Project";

    /** A class that can be returned by this peer. */
    public static final Class CLASS_PROJECT =
        initClass(CLASSNAME_PROJECT);
            /** A key representing a particular subclass */
    public static final String CLASSKEY_ORGANIZATION =
        "organization";

    /** A class that can be returned by this peer. */
    public static final String CLASSNAME_ORGANIZATION =
        "org.thdl.roster.om.Organization";

    /** A class that can be returned by this peer. */
    public static final Class CLASS_ORGANIZATION =
        initClass(CLASSNAME_ORGANIZATION);
            
    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria)
        throws TorqueException
    {
        return BaseMemberPeer
            .doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con)
        throws TorqueException
    {
                                                                                                                                                                                           
        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        if (con == null)
        {
            return BasePeer.doInsert(criteria);
        }
        else
        {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria)
            throws TorqueException
    {
            criteria.addSelectColumn(ID);
            criteria.addSelectColumn(CREATED_BY);
            criteria.addSelectColumn(MODIFIED_BY);
            criteria.addSelectColumn(CREATED_ON);
            criteria.addSelectColumn(MODIFIED_ON);
            criteria.addSelectColumn(DELETED);
            criteria.addSelectColumn(CONTACT_INFO_ID);
            criteria.addSelectColumn(RESEARCH_INTEREST_ID);
            criteria.addSelectColumn(PUBLICATION_ID);
            criteria.addSelectColumn(MEMBER_TYPE);
            criteria.addSelectColumn(PERSON_DATA_ID);
            criteria.addSelectColumn(PROJECT_DATA_ID);
            criteria.addSelectColumn(ORGANIZATION_DATA_ID);
        }


    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Member row2Object(Record row,
                                             int offset,
                                             Class cls)
        throws TorqueException
    {
        try
        {
            Member obj = (Member) cls.newInstance();
            populateObject(row, offset, obj);
                            obj.setModified(false);
                        obj.setNew(false);

            return obj;
        }
        catch (InstantiationException e)
        {
            throw new TorqueException(e);
        }
        catch (IllegalAccessException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row,
                                      int offset,
                                      Member obj)
        throws TorqueException
    {
        try
        {
                                        obj.setId(row.getValue(offset + 0).asIntegerObj());
                                            obj.setCreatedBy(row.getValue(offset + 1).asIntegerObj());
                                            obj.setModifiedBy(row.getValue(offset + 2).asIntegerObj());
                                            obj.setCreatedOn(row.getValue(offset + 3).asUtilDate());
                                            obj.setModifiedOn(row.getValue(offset + 4).asUtilDate());
                                            obj.setDeleted(row.getValue(offset + 5).asString());
                                            obj.setContactInfoId(row.getValue(offset + 6).asIntegerObj());
                                            obj.setResearchInterestId(row.getValue(offset + 7).asIntegerObj());
                                            obj.setPublicationId(row.getValue(offset + 8).asIntegerObj());
                                            obj.setMemberType(row.getValue(offset + 9).asString());
                                            obj.setPersonDataId(row.getValue(offset + 10).asIntegerObj());
                                            obj.setProjectDataId(row.getValue(offset + 11).asIntegerObj());
                                            obj.setOrganizationDataId(row.getValue(offset + 12).asIntegerObj());
                            }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con)
        throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria)
        throws TorqueException
    {
        return BaseMemberPeer
            .doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con)
        throws TorqueException
    {
    
        if (criteria.getSelectColumns().size() == 0)
        {
            addSelectColumns(criteria);
        }

                                                                                                                                                                                           
        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        // BasePeer returns a List of Value (Village) arrays.  The array
        // order follows the order columns were placed in the Select clause.
        if (con == null)
        {
            return BasePeer.doSelect(criteria);
        }
        else
        {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records)
        throws TorqueException
    {
        List results = new ArrayList(records.size());

        // populate the object(s)
        for (int i = 0; i < records.size(); i++)
        {
            Record row = (Record) records.get(i);
            results.add(MemberPeer.row2Object(row, 1,
                MemberPeer.getOMClass(row, 1)));
        }
        return results;
    }
 

        /**
     * The returned Class will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass(Record record, int offset)
        throws TorqueException
    {
        Class c = null;
        try
        {
                Class omClass = null;
            String classKey =
                record.getValue(offset - 1 + 10)
                .asString();
                                        if (CLASSKEY_PERSON.equals(classKey))
                        {
                omClass = CLASS_PERSON;
            }
                                            else if (CLASSKEY_PROJECT.equals(classKey))
                        {
                omClass = CLASS_PROJECT;
            }
                                            else if (CLASSKEY_ORGANIZATION.equals(classKey))
                        {
                omClass = CLASS_ORGANIZATION;
            }
                                else
            {
                omClass = getOMClass();
            }
            c = omClass;
            }
        catch (Exception e)
        {
            throw new TorqueException(e);
        }
        return c;
    }


    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass()
        throws TorqueException
    {
            return CLASS_DEFAULT;
        }


    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException
    {
         BaseMemberPeer
            .doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
                                selectCriteria.put(ID, criteria.remove(ID));
                                                                                                                                                                                                                                                                                                  
        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        if (con == null)
        {
            BasePeer.doUpdate(selectCriteria, criteria);
        }
        else
        {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria) throws TorqueException
     {
         BaseMemberPeer
            .doDelete(criteria, (Connection) null);
     }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria, Connection con)
        throws TorqueException
     {
                                                                                                                                                                                           
        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        if (con == null)
        {
            BasePeer.doDelete(criteria);
        }
        else
        {
            BasePeer.doDelete(criteria, con);
        }
     }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Member obj) throws TorqueException
    {
        return doSelect(buildCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Member obj) throws TorqueException
    {
                obj.setPrimaryKey(doInsert(buildCriteria(obj)));
                obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Member obj) throws TorqueException
    {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Member obj) throws TorqueException
    {
        doDelete(buildCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Member) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Member obj, Connection con)
        throws TorqueException
    {
                obj.setPrimaryKey(doInsert(buildCriteria(obj), con));
                obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Member) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Member obj, Connection con)
        throws TorqueException
    {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(Member) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Member obj, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException
    {
        BaseMemberPeer
           .doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria( ObjectKey pk )
    {
        Criteria criteria = new Criteria();
              criteria.add(ID, pk);
          return criteria;
     }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria( Member obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
                            if (!obj.isNew())
                       criteria.add(ID, obj.getId());
                                criteria.add(CREATED_BY, obj.getCreatedBy());
                                criteria.add(MODIFIED_BY, obj.getModifiedBy());
                                criteria.add(CREATED_ON, obj.getCreatedOn());
                                criteria.add(MODIFIED_ON, obj.getModifiedOn());
                                criteria.add(DELETED, obj.getDeleted());
                                criteria.add(CONTACT_INFO_ID, obj.getContactInfoId());
                                criteria.add(RESEARCH_INTEREST_ID, obj.getResearchInterestId());
                                criteria.add(PUBLICATION_ID, obj.getPublicationId());
                                criteria.add(MEMBER_TYPE, obj.getMemberType());
                                criteria.add(PERSON_DATA_ID, obj.getPersonDataId());
                                criteria.add(PROJECT_DATA_ID, obj.getProjectDataId());
                                criteria.add(ORGANIZATION_DATA_ID, obj.getOrganizationDataId());
                return criteria;
    }

 

    
    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Member retrieveByPK(Integer pk)
        throws TorqueException
    {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Member retrieveByPK(ObjectKey pk)
        throws TorqueException
    {
        Connection db = null;
        Member retVal = null;
        try
        {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Member retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException
    {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() != 1)
        {
            throw new TorqueException("Failed to select one and only one row.");
        }
        else
        {
            return (Member)v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks)
        throws TorqueException
    {
        Connection db = null;
        List retVal = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           retVal = retrieveByPKs(pks, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs( List pks, Connection dbcon )
        throws TorqueException
    {
        List objs = null;
        if (pks == null || pks.size() == 0)
        {
            objs = new LinkedList();
        }
        else
        {
            Criteria criteria = new Criteria();
              criteria.addIn( ID, pks );
          objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

 



          
          
                       
          
          


    /**
     * selects a collection of Member objects pre-filled with their
     * ContactInfo objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinContactInfo(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        MemberPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        ContactInfoPeer.addSelectColumns(c);


                  c.addJoin(MemberPeer.CONTACT_INFO_ID,
            ContactInfoPeer.ID);
     

                                                                                                                                                                                           
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = MemberPeer.getOMClass(row, 1);

            Member obj1 = (Member) MemberPeer
                .row2Object(row, 1, omClass);


             omClass = ContactInfoPeer.getOMClass();
            ContactInfo obj2 = (ContactInfo)ContactInfoPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ContactInfo temp_obj2 = (ContactInfo)temp_obj1.getContactInfo();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
            
                       
          
          


    /**
     * selects a collection of Member objects pre-filled with their
     * ResearchInterest objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinResearchInterest(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        MemberPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        ResearchInterestPeer.addSelectColumns(c);


                  c.addJoin(MemberPeer.RESEARCH_INTEREST_ID,
            ResearchInterestPeer.ID);
     

                                                                                                                                                                                           
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = MemberPeer.getOMClass(row, 1);

            Member obj1 = (Member) MemberPeer
                .row2Object(row, 1, omClass);


             omClass = ResearchInterestPeer.getOMClass();
            ResearchInterest obj2 = (ResearchInterest)ResearchInterestPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ResearchInterest temp_obj2 = (ResearchInterest)temp_obj1.getResearchInterest();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
            
                       
          
          


    /**
     * selects a collection of Member objects pre-filled with their
     * Publication objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinPublication(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        MemberPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        PublicationPeer.addSelectColumns(c);


                  c.addJoin(MemberPeer.PUBLICATION_ID,
            PublicationPeer.ID);
     

                                                                                                                                                                                           
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = MemberPeer.getOMClass(row, 1);

            Member obj1 = (Member) MemberPeer
                .row2Object(row, 1, omClass);


             omClass = PublicationPeer.getOMClass();
            Publication obj2 = (Publication)PublicationPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                Publication temp_obj2 = (Publication)temp_obj1.getPublication();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
            
                       
          
          


    /**
     * selects a collection of Member objects pre-filled with their
     * PersonData objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinPersonData(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        MemberPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        PersonDataPeer.addSelectColumns(c);


                  c.addJoin(MemberPeer.PERSON_DATA_ID,
            PersonDataPeer.ID);
     

                                                                                                                                                                                           
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = MemberPeer.getOMClass(row, 1);

            Member obj1 = (Member) MemberPeer
                .row2Object(row, 1, omClass);


             omClass = PersonDataPeer.getOMClass();
            PersonData obj2 = (PersonData)PersonDataPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                PersonData temp_obj2 = (PersonData)temp_obj1.getPersonData();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
            
                       
          
          


    /**
     * selects a collection of Member objects pre-filled with their
     * ProjectData objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinProjectData(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        MemberPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        ProjectDataPeer.addSelectColumns(c);


                  c.addJoin(MemberPeer.PROJECT_DATA_ID,
            ProjectDataPeer.ID);
     

                                                                                                                                                                                           
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = MemberPeer.getOMClass(row, 1);

            Member obj1 = (Member) MemberPeer
                .row2Object(row, 1, omClass);


             omClass = ProjectDataPeer.getOMClass();
            ProjectData obj2 = (ProjectData)ProjectDataPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ProjectData temp_obj2 = (ProjectData)temp_obj1.getProjectData();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
            
                       
          
          


    /**
     * selects a collection of Member objects pre-filled with their
     * OrganizationData objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinOrganizationData(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        MemberPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        OrganizationDataPeer.addSelectColumns(c);


                  c.addJoin(MemberPeer.ORGANIZATION_DATA_ID,
            OrganizationDataPeer.ID);
     

                                                                                                                                                                                           
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = MemberPeer.getOMClass(row, 1);

            Member obj1 = (Member) MemberPeer
                .row2Object(row, 1, omClass);


             omClass = OrganizationDataPeer.getOMClass();
            OrganizationData obj2 = (OrganizationData)OrganizationDataPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                OrganizationData temp_obj2 = (OrganizationData)temp_obj1.getOrganizationData();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
     

  
                                  
    
     
                       
          

    /**
     * selects a collection of Member objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptContactInfo(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                              
                ResearchInterestPeer.addSelectColumns(c);
        int offset3 = offset2 + ResearchInterestPeer.numColumns;
                                          
                PublicationPeer.addSelectColumns(c);
        int offset4 = offset3 + PublicationPeer.numColumns;
                                          
                PersonDataPeer.addSelectColumns(c);
        int offset5 = offset4 + PersonDataPeer.numColumns;
                                          
                ProjectDataPeer.addSelectColumns(c);
        int offset6 = offset5 + ProjectDataPeer.numColumns;
                                          
                OrganizationDataPeer.addSelectColumns(c);
        int offset7 = offset6 + OrganizationDataPeer.numColumns;
                                                                                                                                                                                                                         
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = MemberPeer.getOMClass(row, 1);
      
            Member obj1 = (Member)MemberPeer
                .row2Object(row, 1, omClass);


                            
                                  
                                                
                        
            
                 omClass = ResearchInterestPeer.getOMClass();
                ResearchInterest obj2 = (ResearchInterest)ResearchInterestPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ResearchInterest temp_obj2 = (ResearchInterest)temp_obj1.getResearchInterest();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = PublicationPeer.getOMClass();
                Publication obj3 = (Publication)PublicationPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                Publication temp_obj3 = (Publication)temp_obj1.getPublication();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initMembers();
                obj3.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = PersonDataPeer.getOMClass();
                PersonData obj4 = (PersonData)PersonDataPeer
                .row2Object( row, offset4, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                PersonData temp_obj4 = (PersonData)temp_obj1.getPersonData();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initMembers();
                obj4.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = ProjectDataPeer.getOMClass();
                ProjectData obj5 = (ProjectData)ProjectDataPeer
                .row2Object( row, offset5, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ProjectData temp_obj5 = (ProjectData)temp_obj1.getProjectData();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initMembers();
                obj5.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = OrganizationDataPeer.getOMClass();
                OrganizationData obj6 = (OrganizationData)OrganizationDataPeer
                .row2Object( row, offset6, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                OrganizationData temp_obj6 = (OrganizationData)temp_obj1.getOrganizationData();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initMembers();
                obj6.addMember(obj1);
            }
                        results.add(obj1);
        }
        return results;
    }
  
     
                       
          

    /**
     * selects a collection of Member objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptResearchInterest(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                ContactInfoPeer.addSelectColumns(c);
        int offset3 = offset2 + ContactInfoPeer.numColumns;
                                          
                              
                PublicationPeer.addSelectColumns(c);
        int offset4 = offset3 + PublicationPeer.numColumns;
                                          
                PersonDataPeer.addSelectColumns(c);
        int offset5 = offset4 + PersonDataPeer.numColumns;
                                          
                ProjectDataPeer.addSelectColumns(c);
        int offset6 = offset5 + ProjectDataPeer.numColumns;
                                          
                OrganizationDataPeer.addSelectColumns(c);
        int offset7 = offset6 + OrganizationDataPeer.numColumns;
                                                                                                                                                                                                                         
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = MemberPeer.getOMClass(row, 1);
      
            Member obj1 = (Member)MemberPeer
                .row2Object(row, 1, omClass);


                            
                                                
                        
            
                 omClass = ContactInfoPeer.getOMClass();
                ContactInfo obj2 = (ContactInfo)ContactInfoPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ContactInfo temp_obj2 = (ContactInfo)temp_obj1.getContactInfo();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
                                
                                  
                                                
                        
            
                 omClass = PublicationPeer.getOMClass();
                Publication obj3 = (Publication)PublicationPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                Publication temp_obj3 = (Publication)temp_obj1.getPublication();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initMembers();
                obj3.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = PersonDataPeer.getOMClass();
                PersonData obj4 = (PersonData)PersonDataPeer
                .row2Object( row, offset4, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                PersonData temp_obj4 = (PersonData)temp_obj1.getPersonData();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initMembers();
                obj4.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = ProjectDataPeer.getOMClass();
                ProjectData obj5 = (ProjectData)ProjectDataPeer
                .row2Object( row, offset5, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ProjectData temp_obj5 = (ProjectData)temp_obj1.getProjectData();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initMembers();
                obj5.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = OrganizationDataPeer.getOMClass();
                OrganizationData obj6 = (OrganizationData)OrganizationDataPeer
                .row2Object( row, offset6, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                OrganizationData temp_obj6 = (OrganizationData)temp_obj1.getOrganizationData();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initMembers();
                obj6.addMember(obj1);
            }
                        results.add(obj1);
        }
        return results;
    }
  
     
                       
          

    /**
     * selects a collection of Member objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptPublication(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                ContactInfoPeer.addSelectColumns(c);
        int offset3 = offset2 + ContactInfoPeer.numColumns;
                                          
                ResearchInterestPeer.addSelectColumns(c);
        int offset4 = offset3 + ResearchInterestPeer.numColumns;
                                          
                              
                PersonDataPeer.addSelectColumns(c);
        int offset5 = offset4 + PersonDataPeer.numColumns;
                                          
                ProjectDataPeer.addSelectColumns(c);
        int offset6 = offset5 + ProjectDataPeer.numColumns;
                                          
                OrganizationDataPeer.addSelectColumns(c);
        int offset7 = offset6 + OrganizationDataPeer.numColumns;
                                                                                                                                                                                                                         
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = MemberPeer.getOMClass(row, 1);
      
            Member obj1 = (Member)MemberPeer
                .row2Object(row, 1, omClass);


                            
                                                
                        
            
                 omClass = ContactInfoPeer.getOMClass();
                ContactInfo obj2 = (ContactInfo)ContactInfoPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ContactInfo temp_obj2 = (ContactInfo)temp_obj1.getContactInfo();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = ResearchInterestPeer.getOMClass();
                ResearchInterest obj3 = (ResearchInterest)ResearchInterestPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ResearchInterest temp_obj3 = (ResearchInterest)temp_obj1.getResearchInterest();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initMembers();
                obj3.addMember(obj1);
            }
                                
                                  
                                                
                        
            
                 omClass = PersonDataPeer.getOMClass();
                PersonData obj4 = (PersonData)PersonDataPeer
                .row2Object( row, offset4, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                PersonData temp_obj4 = (PersonData)temp_obj1.getPersonData();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initMembers();
                obj4.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = ProjectDataPeer.getOMClass();
                ProjectData obj5 = (ProjectData)ProjectDataPeer
                .row2Object( row, offset5, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ProjectData temp_obj5 = (ProjectData)temp_obj1.getProjectData();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initMembers();
                obj5.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = OrganizationDataPeer.getOMClass();
                OrganizationData obj6 = (OrganizationData)OrganizationDataPeer
                .row2Object( row, offset6, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                OrganizationData temp_obj6 = (OrganizationData)temp_obj1.getOrganizationData();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initMembers();
                obj6.addMember(obj1);
            }
                        results.add(obj1);
        }
        return results;
    }
  
     
                       
          

    /**
     * selects a collection of Member objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptPersonData(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                ContactInfoPeer.addSelectColumns(c);
        int offset3 = offset2 + ContactInfoPeer.numColumns;
                                          
                ResearchInterestPeer.addSelectColumns(c);
        int offset4 = offset3 + ResearchInterestPeer.numColumns;
                                          
                PublicationPeer.addSelectColumns(c);
        int offset5 = offset4 + PublicationPeer.numColumns;
                                          
                              
                ProjectDataPeer.addSelectColumns(c);
        int offset6 = offset5 + ProjectDataPeer.numColumns;
                                          
                OrganizationDataPeer.addSelectColumns(c);
        int offset7 = offset6 + OrganizationDataPeer.numColumns;
                                                                                                                                                                                                                         
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = MemberPeer.getOMClass(row, 1);
      
            Member obj1 = (Member)MemberPeer
                .row2Object(row, 1, omClass);


                            
                                                
                        
            
                 omClass = ContactInfoPeer.getOMClass();
                ContactInfo obj2 = (ContactInfo)ContactInfoPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ContactInfo temp_obj2 = (ContactInfo)temp_obj1.getContactInfo();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = ResearchInterestPeer.getOMClass();
                ResearchInterest obj3 = (ResearchInterest)ResearchInterestPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ResearchInterest temp_obj3 = (ResearchInterest)temp_obj1.getResearchInterest();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initMembers();
                obj3.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = PublicationPeer.getOMClass();
                Publication obj4 = (Publication)PublicationPeer
                .row2Object( row, offset4, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                Publication temp_obj4 = (Publication)temp_obj1.getPublication();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initMembers();
                obj4.addMember(obj1);
            }
                                
                                  
                                                
                        
            
                 omClass = ProjectDataPeer.getOMClass();
                ProjectData obj5 = (ProjectData)ProjectDataPeer
                .row2Object( row, offset5, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ProjectData temp_obj5 = (ProjectData)temp_obj1.getProjectData();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initMembers();
                obj5.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = OrganizationDataPeer.getOMClass();
                OrganizationData obj6 = (OrganizationData)OrganizationDataPeer
                .row2Object( row, offset6, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                OrganizationData temp_obj6 = (OrganizationData)temp_obj1.getOrganizationData();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initMembers();
                obj6.addMember(obj1);
            }
                        results.add(obj1);
        }
        return results;
    }
  
     
                       
          

    /**
     * selects a collection of Member objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptProjectData(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                ContactInfoPeer.addSelectColumns(c);
        int offset3 = offset2 + ContactInfoPeer.numColumns;
                                          
                ResearchInterestPeer.addSelectColumns(c);
        int offset4 = offset3 + ResearchInterestPeer.numColumns;
                                          
                PublicationPeer.addSelectColumns(c);
        int offset5 = offset4 + PublicationPeer.numColumns;
                                          
                PersonDataPeer.addSelectColumns(c);
        int offset6 = offset5 + PersonDataPeer.numColumns;
                                          
                              
                OrganizationDataPeer.addSelectColumns(c);
        int offset7 = offset6 + OrganizationDataPeer.numColumns;
                                                                                                                                                                                                                         
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = MemberPeer.getOMClass(row, 1);
      
            Member obj1 = (Member)MemberPeer
                .row2Object(row, 1, omClass);


                            
                                                
                        
            
                 omClass = ContactInfoPeer.getOMClass();
                ContactInfo obj2 = (ContactInfo)ContactInfoPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ContactInfo temp_obj2 = (ContactInfo)temp_obj1.getContactInfo();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = ResearchInterestPeer.getOMClass();
                ResearchInterest obj3 = (ResearchInterest)ResearchInterestPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ResearchInterest temp_obj3 = (ResearchInterest)temp_obj1.getResearchInterest();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initMembers();
                obj3.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = PublicationPeer.getOMClass();
                Publication obj4 = (Publication)PublicationPeer
                .row2Object( row, offset4, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                Publication temp_obj4 = (Publication)temp_obj1.getPublication();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initMembers();
                obj4.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = PersonDataPeer.getOMClass();
                PersonData obj5 = (PersonData)PersonDataPeer
                .row2Object( row, offset5, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                PersonData temp_obj5 = (PersonData)temp_obj1.getPersonData();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initMembers();
                obj5.addMember(obj1);
            }
                                
                                  
                                                
                        
            
                 omClass = OrganizationDataPeer.getOMClass();
                OrganizationData obj6 = (OrganizationData)OrganizationDataPeer
                .row2Object( row, offset6, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                OrganizationData temp_obj6 = (OrganizationData)temp_obj1.getOrganizationData();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initMembers();
                obj6.addMember(obj1);
            }
                        results.add(obj1);
        }
        return results;
    }
  
     
                       
          

    /**
     * selects a collection of Member objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in MemberPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptOrganizationData(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                ContactInfoPeer.addSelectColumns(c);
        int offset3 = offset2 + ContactInfoPeer.numColumns;
                                          
                ResearchInterestPeer.addSelectColumns(c);
        int offset4 = offset3 + ResearchInterestPeer.numColumns;
                                          
                PublicationPeer.addSelectColumns(c);
        int offset5 = offset4 + PublicationPeer.numColumns;
                                          
                PersonDataPeer.addSelectColumns(c);
        int offset6 = offset5 + PersonDataPeer.numColumns;
                                          
                ProjectDataPeer.addSelectColumns(c);
        int offset7 = offset6 + ProjectDataPeer.numColumns;
                                          
                                                                                                                                                                                                             
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = MemberPeer.getOMClass(row, 1);
      
            Member obj1 = (Member)MemberPeer
                .row2Object(row, 1, omClass);


                            
                                                
                        
            
                 omClass = ContactInfoPeer.getOMClass();
                ContactInfo obj2 = (ContactInfo)ContactInfoPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ContactInfo temp_obj2 = (ContactInfo)temp_obj1.getContactInfo();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initMembers();
                obj2.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = ResearchInterestPeer.getOMClass();
                ResearchInterest obj3 = (ResearchInterest)ResearchInterestPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ResearchInterest temp_obj3 = (ResearchInterest)temp_obj1.getResearchInterest();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initMembers();
                obj3.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = PublicationPeer.getOMClass();
                Publication obj4 = (Publication)PublicationPeer
                .row2Object( row, offset4, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                Publication temp_obj4 = (Publication)temp_obj1.getPublication();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initMembers();
                obj4.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = PersonDataPeer.getOMClass();
                PersonData obj5 = (PersonData)PersonDataPeer
                .row2Object( row, offset5, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                PersonData temp_obj5 = (PersonData)temp_obj1.getPersonData();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj5.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj5.initMembers();
                obj5.addMember(obj1);
            }
                                
                                                
                        
            
                 omClass = ProjectDataPeer.getOMClass();
                ProjectData obj6 = (ProjectData)ProjectDataPeer
                .row2Object( row, offset6, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Member temp_obj1 = (Member)results.get(j);
                ProjectData temp_obj6 = (ProjectData)temp_obj1.getProjectData();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj6.addMember(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj6.initMembers();
                obj6.addMember(obj1);
            }
                                
                          results.add(obj1);
        }
        return results;
    }
    

    /**
     * Returns the TableMap related to this peer.  This method is not
     * needed for general use but a specific application could have a need.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static TableMap getTableMap()
        throws TorqueException
    {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }
 }
